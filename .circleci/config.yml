docker_login_params: &docker_login_params
  login:
    description: "Login command to your repository (using environment variables from your secure context)"
    type: string
    default: echo "Login is UNSPECIFIED"

docker_arg_params: &docker_arg_params
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  useArgs:
    description: "Enable if you pass args"
    type: boolean
    default: false
  args:
    description: "Either none, one or multiple comma-separated Docker build arguments to apply"
    type: string
    default: ""

docker_attach_params: &docker_attach_params
  attach:
    description: "Attach workspace"
    type: boolean
    default: false
  attachAt:
    description: "Where to attach the workspace"
    type: string
    default: "."

docker_build_params: &docker_build_params
  file:
    description: "Path to the Dockerfile"
    type: string
    default: "Dockerfile"
  cache:
    description: "Use image layer cache"
    type: boolean
    default: false
  prepare:
    description: "Prepare steps after checkout (e.g., chmod)"
    type: steps
    default: []
  path:
    description: "Build path"
    type: string
    default: "."
  addLabels:
    description: "Add default schema labels"
    type: boolean
    default: false
  baseTag:
    description: "Docker base tag to use"
    type: string
    default: app

docker_tags_params: &docker_tags_params
  tags:
    description: "Either one or multiple comma-separated Docker tags to apply and push"
    type: string
    default: ""

docker_build_args: &docker_build_args
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  useArgs: << parameters.useArgs >>
  args: << parameters.args >>
  file: << parameters.file >>
  cache: << parameters.cache >>
  prepare: << parameters.prepare >>
  path: << parameters.path >>
  baseTag: << parameters.baseTag >>
  attach: << parameters.attach >>
  attachAt: << parameters.attachAt >>
  addLabels: << parameters.addLabels >>

docker_version_params: &docker_version_params
  docker_version:
    description: "Docker version"
    type: string
    default: stable

readmyhub_version_params: &readmyhub_version_params
  version:
    description: "Version of the readmyhub Docker image"
    type: string
    default: stable
  file:
    description: "Path to the README.md file"
    type: string
    default: "README.md"

orbs:
  readmyhuborb:
    executors:
      default:
        parameters:
          <<: *readmyhub_version_params
        docker:
        - image: gofunky/readmyhub:<< parameters.version >>-git
        working_directory: /data
        environment:
          README_PATH: /data/<< parameters.file >>
          IFS: "/"
    commands:
      update:
        steps:
        - checkout
        - run:
            name: Check DOCKER_USR
            command: |
              if [ -z "$DOCKER_USR" ]; then
                echo "ERROR: DOCKER_USR is not set!"
                exit 127
              fi
        - run:
            name: Check DOCKER_PWD
            command: |
              if [ -z "$DOCKER_PWD" ]; then
                echo "ERROR: DOCKER_PWD is not set!"
                exit 127
              fi
        - run:
            name: Update README
            command: |
              URL=`git remote get-url origin`
              URL=`echo "$URL" | sed -e "s/^https:\/\///" -e "s/\.git//" | sed -e "s/^git@//"`
              URL=`echo "$URL" | sed -r 's/github.com:/github.com\//g'`
              read -a groups \<\<\< $URL
              DOCKERHUB_ORG=${groups[1]}
              DOCKERHUB_REPO=${groups[2]}
              export DOCKERHUB_USR=${DOCKER_USR}
              export DOCKERHUB_PWD=${DOCKER_PWD}
              node /app/index.js
    jobs:
      update:
        description: "Push the given README.md to the Docker Hub"
        executor:
          name: default
          version: << parameters.version >>
          file: << parameters.file >>
        parameters:
          <<: *readmyhub_version_params
        steps:
        - update

  dockerorb:
    executors:
      default:
        parameters:
          <<: *docker_version_params
        docker:
        - image: docker:<< parameters.docker_version >>-git
        working_directory: ~/app
        environment:
          IFS: ","
    commands:
      login:
        parameters:
          <<: *docker_login_params
        steps:
        - run:
            name: "Login to your origin Docker repository"
            command: << parameters.login >>
      build:
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
        steps:
        - checkout
        - setup_remote_docker
        - when:
            condition: << parameters.attach >>
            steps:
            - attach_workspace:
                at: << parameters.attachAt >>
        - steps: << parameters.prepare >>
        - when:
            condition: << parameters.cache >>
            steps:
            - restore_cache:
                keys:
                - docker-<< parameters.path >>-<< parameters.file >>-<< parameters.baseTag >>-{{ .Branch }}
                paths:
                - /caches/<< parameters.baseTag >>.tar
            - run:
                name: Load Docker image layer cache
                command: |
                  set +o pipefail
                  docker load -i /caches/<< parameters.baseTag >>.tar | true
        - when:
            condition: << parameters.useArgs >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - when:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image with arguments and labels
                    command: |
                      buildarg=""
                      args="<< parameters.args >>,BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`,VCS_REF=`git rev-parse --short HEAD`"
                      for arg in $args; do
                        buildarg="${buildarg} --build-arg ${arg}"
                      done
                      build="docker build ${buildarg} --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>"
                      eval $build
            - unless:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image with arguments and without labels
                    command: |
                      buildarg=""
                      args="<< parameters.args >>"
                      for arg in $args; do
                        buildarg="${buildarg} --build-arg ${arg}"
                      done
                      build="docker build ${buildarg} --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>"
                      eval $build
        - unless:
            condition: << parameters.useArgs >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - when:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image without arguments and with labels
                    command: |
                      docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=`git rev-parse --short HEAD` --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>
            - unless:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image without arguments and without labels
                    command: |
                      docker build --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>
        - when:
            condition: << parameters.cache >>
            steps:
            - run:
                name: Save Docker image layer cache
                command: |
                  mkdir -p /caches
                  docker save -o /caches/<< parameters.baseTag >>.tar << parameters.baseTag >>
            - save_cache:
                key: docker-<< parameters.path >>-<< parameters.file >>-<< parameters.baseTag >>-{{ .Branch }}-{{ epoch }}
                paths:
                - /caches/<< parameters.baseTag >>.tar
      tag:
        parameters:
          <<: *docker_tags_params
          baseTag:
            description: "Docker base tag to use"
            type: string
            default: app
        steps:
        - run:
            name: Add Docker tags
            command: |
              tags="<< parameters.tags >>"
              for tag in $tags; do
                docker tag << parameters.baseTag >> "$tag"
              done
      test:
        parameters:
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - run:
            name: Install Docker Compose
            command: |
              if [ ! -e "/usr/local/bin/docker-compose" ]; then
                echo "Installing latest Docker Compose..."
                apk add --no-cache py-pip
                pip install docker-compose
              else
                echo "Skipping installation of Docker Compose..."
              fi
        - run:
            name: Run Docker compose tests
            command: |
              docker-compose -f "<< parameters.compose >>" up --exit-code-from sut --build --abort-on-container-exit
      push:
        parameters:
          <<: *docker_tags_params
        steps:
        - deploy:
            name: Push application Docker image
            command: |
              tags="<< parameters.tags >>"
              for tag in $tags; do
                docker push "$tag"
              done
    jobs:
      build:
        description: "Build Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_version_params
        steps:
        - build:
            <<: *docker_build_args

      build-test:
        description: "Build Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - tag:
            tags: << parameters.tags >>
            baseTag: << parameters.baseTag >>
        - test:
            compose: << parameters.compose >>

      build-push:
        description: "Build and push Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          <<: *docker_login_params
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                baseTag: << parameters.baseTag >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>

      build-test-push:
        description: "Build and push Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          <<: *docker_login_params
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                baseTag: << parameters.baseTag >>
            - test:
                compose: << parameters.compose >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>

jobs:
  get-fossa:
    docker:
    - image: bash
    steps:
    - run:
        name: Install Certificates for Workspace
        command: |
          apk add --no-cache ca-certificates
    - run:
        name: Install Fossa
        command: |
          wget -O - https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash
    - persist_to_workspace:
        root: /usr/local/bin
        paths:
        - fossa
  get-musl:
    docker:
    - image: alpine
    environment:
      MUSLC_VERSION: 1.1.19
    steps:
    - run:
        name: Install Certificates for Workspace
        command: |
          apk add --no-cache ca-certificates
    - run:
        name: Download Musl
        command: |
          wget http://www.musl-libc.org/releases/musl-${MUSLC_VERSION}.tar.gz
          mv musl-${MUSLC_VERSION}.tar.gz musl.tar.gz
    - persist_to_workspace:
        root: .
        paths:
        - musl.tar.gz

golang_docker: &golang_docker
  context: docker-hub
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  useArgs: true
  baseTag: go
  addLabels: true
  attach: true
  docker_version: 18.06.1
  requires:
  - get-fossa
  prepare:
  - run:
      name: Fix permissions
      command: |
        chmod +x ./tests/sut.sh

golang_master_filter: &golang_master_filter
  login: docker login -u $DOCKER_USR -p $DOCKER_PWD
  filters:
    branches:
      only:
      - master

golang_pr_filter: &golang_pr_filter
  filters:
    branches:
      only:
      - /^pull.*/

version: 2.1
workflows:
  readme:
    jobs:
    - readmyhuborb/update:
        filters:
          branches:
            only:
            - master
        name: readme
        version: 1.1.0
        context: docker-hub
  build-master:
    jobs:
    - get-fossa
    - get-musl
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: build-1.10.3
        args: "GOVERSION=1.10.3"
        tags: "gofunky/golang:1.10.3"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: build-1.9.7
        args: "GOVERSION=1.9.7"
        tags: "gofunky/golang:1.9.7"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: build-1.10
        args: "GOVERSION=1.10"
        tags: "gofunky/golang:1.10"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: build-1.9
        args: "GOVERSION=1.9"
        tags: "gofunky/golang:1.9"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: build-latest
        tags: "gofunky/golang:latest"
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: false
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: circleci-1.10.3
        args: "GOVERSION=1.10.3"
        tags: "gofunky/golang:1.10.3-circleci"
        file: "Dockerfile.circleci"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: circleci-1.9.7
        args: "GOVERSION=1.9.7"
        tags: "gofunky/golang:1.9.7-circleci"
        file: "Dockerfile.circleci"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: circleci-1.10
        args: "GOVERSION=1.10"
        tags: "gofunky/golang:1.10-circleci"
        file: "Dockerfile.circleci"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: circleci-1.9
        args: "GOVERSION=1.9"
        tags: "gofunky/golang:1.9-circleci"
        file: "Dockerfile.circleci"
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: circleci-latest
        tags: "gofunky/golang:circleci"
        file: "Dockerfile.circleci"
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: false
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: alpine-1.10.3
        args: "GOVERSION=1.10.3-alpine3.8"
        tags: "gofunky/golang:1.10.3-alpine,gofunky/golang:1.10.3-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
        cache: true
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: alpine-1.9.7
        args: "GOVERSION=1.9.7-alpine3.8"
        tags: "gofunky/golang:1.9.7-alpine,gofunky/golang:1.9.7-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
        cache: true
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: alpine-1.10
        args: "GOVERSION=1.10-alpine3.8"
        tags: "gofunky/golang:1.10-alpine,gofunky/golang:1.10-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
        cache: true
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: alpine-1.9
        args: "GOVERSION=1.9-alpine3.8"
        tags: "gofunky/golang:1.9-alpine,gofunky/golang:1.9-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
        cache: true
    - dockerorb/build-test-push:
        <<: *golang_docker
        <<: *golang_master_filter
        name: alpine-latest
        tags: "gofunky/golang:alpine3.8,gofunky/golang:alpine"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
        cache: true
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: false
  build-pull-request:
    jobs:
    - get-fossa
    - get-musl
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: build-1.10.3
        args: "GOVERSION=1.10.3"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: build-1.9.7
        args: "GOVERSION=1.9.7"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: build-1.10
        args: "GOVERSION=1.10"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: build-1.9
        args: "GOVERSION=1.9"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: build-latest
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: false
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: circleci-1.10.3
        args: "GOVERSION=1.10.3"
        file: "Dockerfile.circleci"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: circleci-1.9.7
        args: "GOVERSION=1.9.7"
        file: "Dockerfile.circleci"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: circleci-1.10
        args: "GOVERSION=1.10"
        file: "Dockerfile.circleci"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: circleci-1.9
        args: "GOVERSION=1.9"
        file: "Dockerfile.circleci"
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: circleci-latest
        file: "Dockerfile.circleci"
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: false
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: alpine-1.10.3
        args: "GOVERSION=1.10.3-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: alpine-1.9.7
        args: "GOVERSION=1.9.7-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: alpine-1.10
        args: "GOVERSION=1.10-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: alpine-1.9
        args: "GOVERSION=1.9-alpine3.8"
        file: "Dockerfile.alpine"
        requires:
        - get-musl
    - dockerorb/build-test:
        <<: *golang_docker
        <<: *golang_pr_filter
        name: alpine-latest
        file: "Dockerfile.alpine"
        requires:
        - get-musl
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: false
